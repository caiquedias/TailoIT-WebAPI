@model CRUD_TailorIT.Models.Funcionario

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Cadastrar</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Novo Funcionário</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.Label("Nome", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NOME, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NOME, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Data de Nascimento", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DATANASC, "{0:yyyy-MM-dd}", new { htmlAttributes = new { @type = "date", @class = "form-control", @id = "DATANASC", @maxlength = "10" } })
                @Html.ValidationMessageFor(model => model.DATANASC, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Email", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EMAIL, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EMAIL, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Sexo", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{
                    var selectList = new SelectList(
                        new List<SelectListItem>
                        {
                    new SelectListItem {Text = "Masculino", Value ="2"},
                    new SelectListItem {Text = "Feminino", Value = "1"},
                    new SelectListItem {Text = "Outro", Value = "0"},
                }, "Value", "Text");
                }
                @Html.DropDownList("ddlSexo", selectList, "Selecione", new { @class = "form-control", @id="ddlSexo" })

                @Html.HiddenFor(model => model.SEXO, new {@id = "hdnSexo" })
                @Html.ValidationMessageFor(model => model.SEXO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Habilidades", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.HABILIDADES, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.HABILIDADES, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/inputmask")

    <script>
        const selectElement = document.getElementById('ddlSexo');
        selectElement.addEventListener('change', (event) => {
            const result = document.getElementById('hdnSexo');
            result.value = selectElement.options[selectElement.selectedIndex].text;
        });
    </script>
}
